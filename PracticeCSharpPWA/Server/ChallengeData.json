{
  "challenges": [
    {
      "name": "Braces",
      "difficulty": "Mid",
      "description": "<p>Write a function that takes a string of braces, and determines if the order of the braces is valid. It should return true if the string is valid, and false if it's invalid. All input strings will be nonempty, and will only consist of parentheses, brackets and curly braces: ()[]{}.</p>",
      "examples": "<div>\"(){}[]\" => True<br />\"([{}])\" => True<br />\"(}\" => False<br />\"[(])\" => False<br />\"[({})](]\" => False </div>",
      "snippet": "public static bool validBraces(String braces)\n{\n\treturn false;\n}",
      "solution": "public static bool validBraces(string braces)\n{\n\tvar st = new Stack<char>();\n\tforeach (var c in braces)\n\t\tswitch (c)\n\t\t{\n\t\t\tcase '(':\n\t\t\tcase'[':\n\t\t\tcase '{':\n\t\t\t\tst.Push(c);\n\t\t\t\tcontinue;\n\t\t\tcase ')':\n\t\t\t\tif (st.Count == 0 || st.Pop() != '(') return false;\n\t\t\t\tcontinue;\n\t\t\tcase ']':\n\t\t\t\tif (st.Count == 0 || st.Pop() != '[') return false;\n\t\t\t\tcontinue;\n\t\t\tcase '}':\n\t\t\t\tif (st.Count == 0 || st.Pop() != '{') return false;\n\t\t\t\tcontinue;\n\t\t}\n\treturn st.Count == 0;\n}"
    },
    {
      "name": "Prime",
      "difficulty": "Mid",
      "description": "<p>Define a function that takes an integer argument and returns logical value true or false depending on if the integer is a prime.\nPer Wikipedia, a prime number(or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.</p>",
      "examples": "<div>is_prime(1)  => false<br/>is_prime(2)  => true<br/>is_prime(-1) => false<br/></div>",
      "snippet": "public static bool IsPrime(int n)\n{\n\treturn false;\n}",
      "solution": "public static bool IsPrime(int n)\n{\n\tif (n <= 2 || n % 2 == 0) return n == 2;\n\tfor (int i = 3; i <= Math.Sqrt(n); i += 2) if (n % i == 0) return false;\n\treturn true;\n}"
    },
    {
      "name": "Rot13",
      "difficulty": "Mid",
      "description": "<p>ROT13 is a simple letter substitution cipher that replaces a letter with the letter 13 letters after it in the alphabet.ROT13 is an example of the Caesar cipher.<br/>Create a function that takes a string and returns the string ciphered with Rot13. If there are numbers or special characters included in the string, they should be returned as they are. Only letters from the latin/english alphabet should be shifted, like in the original Rot13 \"implementation\".</p>",
      "examples": "<div>Rot13(Grfg) => \"Test\"</div>",
      "snippet": "public static string Rot13(string message)\n{\n\t// your code here\n}",
      "solution": "public static string Rot13(string message)\n{\n\treturn String.Join(\"\", message.Select(x => char.IsLetter(x) ? (x >= 65 && x <= 77) || (x >= 97 && x <= 109) ? (char)(x + 13) : (char)(x - 13) : x));\n}"
    },
    {
      "name": "MultipleOf3or5",
      "difficulty": "Easy",
      "description": "<p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.<br/>Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.<br/>Note: If the number is a multiple of both 3 and 5, only count it once.</p>",
      "examples": "<div> Solution(10) => 23</div>",
      "snippet": "public static int Solution(int value)\n{\n\t// Magic Happens\n}",
      "solution": "public static int Solution(int value) => Enumerable.Range(0, value).Where(x => x % 3 == 0 || x % 5 == 0).Sum();"
    },
    {
      "name": "AbbreviateName",
      "difficulty": "Easy",
      "description": "<p>Write a function to convert a name into initials. This kata strictly takes two words with one space in between them.<br/>\nThe output should be two capital letters with a dot separating them.</p>",
      "examples": "<div>Sam Harris => S.H<br/>Patrick Feeney => P.F</div>",
      "snippet": "public static string AbbrevName(string name)\n{\n\treturn \"\";\n}",
      "solution": "public static string AbbrevName(string name)\n{\n\tvar wordArray = name.Split(\" \");\n\tvar firstLetter = wordArray[0][0];\n\tvar secondLetter = wordArray[1][0];\n\treturn $\"{firstLetter.ToString().ToUpper()}.{secondLetter.ToString().ToUpper()}\";\n}"
    }
  ] 
}
