@page "/"
@inject CodeEditorService CodeEditorService

@using PracticeCSharpPWA.Shared.Models.CodeEditorModels

<MatAccordion>
    <MatTabGroup>
        <MatTab Label="Home">
            <MatH4>Check out some C# learning tools, including:</MatH4>
            <MatList SingleSelection="true" TwoLine="true">
                <MatListItem>
                    <MatListItemText>
                        <MatListItemPrimaryText>Code Challenges</MatListItemPrimaryText>
                        <MatListItemSecondaryText>Practice c# by taking some basic coding challenges
                            </MatListItemSecondaryText>
                    </MatListItemText>
                </MatListItem>
                <MatListDivider></MatListDivider>
                <MatListItem>
                    <MatListItemText>
                        <MatListItemPrimaryText>Practice c#</MatListItemPrimaryText>
                        <MatListItemSecondaryText>Use a c# REPL to compile c# line-by-line or use a Monaco Editor with a variety of starting code snippets</MatListItemSecondaryText>
                    </MatListItemText>
                </MatListItem>
                <MatListDivider></MatListDivider>
                <MatListItem>
                    <MatListItemText>
                        <MatListItemPrimaryText>Watch C# Videos</MatListItemPrimaryText>
                        <MatListItemSecondaryText>Select from a variety of Topics to watch YouTube training videos</MatListItemSecondaryText>
                    </MatListItemText>
                </MatListItem>
            </MatList>

        </MatTab>
        <MatTab Label="Code Challenges">
            <CodeChallengeHome />
        </MatTab>
        <MatTab Label="Practice C#(Repl and Monaco)">
            <CodeHome />
        </MatTab>
        <MatTab Label="Watch C# Videos">
            <VideoHome />
        </MatTab>
    </MatTabGroup>
</MatAccordion>
@code
{
    protected bool isAnimate = true;
    protected string CodeOutput;
    protected string codeSnippet;
    bool takeChallenge = false;

    void SolveChallenge()
    {
        takeChallenge = !takeChallenge;
    }
    protected override Task OnInitializedAsync()
    {
        CodeEditorService.OnChange += StateHasChanged;
        return base.OnInitializedAsync();
    }
    protected void HandleOutputChange(string output)
    {
        CodeOutput = output;
        isAnimate = true;
        StateHasChanged();
    }

    protected Task UpdateCodeSnippet()
    {
        codeSnippet = CodeSnippets.BRACESPUZZLE;
        CodeEditorService.UpdateSnippet(codeSnippet);
        StateHasChanged();

        return Task.CompletedTask;
    }

    protected void ToggleAnimation() => isAnimate = false;

    //public void Dispose() => CodeEditorService.OnChange -= StateHasChanged;
}
